/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Model to describe the Access token JSON to return via API.
 * @export
 * @interface AccessToken
 */
export interface AccessToken {
    /**
     * 
     * @type {string}
     * @memberof AccessToken
     */
    'access_token': string;
    /**
     * 
     * @type {string}
     * @memberof AccessToken
     */
    'token_type': string;
}
/**
 * 
 * @export
 * @interface Admin
 */
export interface Admin {
    /**
     * 
     * @type {string}
     * @memberof Admin
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface CreateUserModel
 */
export interface CreateUserModel {
    /**
     * 
     * @type {string}
     * @memberof CreateUserModel
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserModel
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateUserModel
     */
    'plus_one': boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateUserModel
     */
    'email': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Diets = {
    Vegan: 'vegan',
    Vegetarian: 'vegetarian',
    GlutenFree: 'gluten_free',
    DairyFree: 'dairy_free',
    NutFree: 'nut_free',
    ShellfishFree: 'shellfish_free',
    Other: 'other',
    None: 'none'
} as const;

export type Diets = typeof Diets[keyof typeof Diets];


/**
 * 
 * @export
 * @interface GenericMsg
 */
export interface GenericMsg {
    /**
     * 
     * @type {string}
     * @memberof GenericMsg
     */
    'msg': string;
}
/**
 * 
 * @export
 * @interface Guest
 */
export interface Guest {
    /**
     * 
     * @type {string}
     * @memberof Guest
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof Guest
     */
    'last_name': string;
}
/**
 * 
 * @export
 * @interface GuestDetail
 */
export interface GuestDetail {
    /**
     * 
     * @type {string}
     * @memberof GuestDetail
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof GuestDetail
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof GuestDetail
     */
    'preferred_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GuestDetail
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof GuestDetail
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof GuestDetail
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof GuestDetail
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof GuestDetail
     */
    'province'?: string;
    /**
     * 
     * @type {string}
     * @memberof GuestDetail
     */
    'area_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof GuestDetail
     */
    'country'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GuestDetail
     */
    'attending'?: boolean;
    /**
     * 
     * @type {Array<Diets>}
     * @memberof GuestDetail
     */
    'dietary_restrictions'?: Array<Diets>;
    /**
     * 
     * @type {string}
     * @memberof GuestDetail
     */
    'additional_notes'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GuestDetail
     */
    'is_wedding_party'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GuestDetail
     */
    'plus_one_allowed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GuestDetail
     */
    'has_plus_one'?: boolean;
    /**
     * 
     * @type {PlusOneDetail}
     * @memberof GuestDetail
     */
    'plus_one'?: PlusOneDetail | null;
    /**
     * 
     * @type {boolean}
     * @memberof GuestDetail
     */
    'is_over_19'?: boolean;
}
/**
 * 
 * @export
 * @interface GuestDetailForm
 */
export interface GuestDetailForm {
    /**
     * 
     * @type {boolean}
     * @memberof GuestDetailForm
     */
    'attending'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof GuestDetailForm
     */
    'preferred_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GuestDetailForm
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GuestDetailForm
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GuestDetailForm
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GuestDetailForm
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GuestDetailForm
     */
    'province'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GuestDetailForm
     */
    'area_code'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GuestDetailForm
     */
    'country'?: string | null;
    /**
     * 
     * @type {Array<Diets>}
     * @memberof GuestDetailForm
     */
    'dietary_restrictions'?: Array<Diets> | null;
    /**
     * 
     * @type {string}
     * @memberof GuestDetailForm
     */
    'additional_notes'?: string | null;
    /**
     * 
     * @type {PlusOneDetail}
     * @memberof GuestDetailForm
     */
    'plus_one'?: PlusOneDetail | null;
    /**
     * 
     * @type {boolean}
     * @memberof GuestDetailForm
     */
    'is_over_19'?: boolean | null;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface PlusOneDetail
 */
export interface PlusOneDetail {
    /**
     * 
     * @type {string}
     * @memberof PlusOneDetail
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof PlusOneDetail
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof PlusOneDetail
     */
    'email': string;
    /**
     * 
     * @type {Array<Diets>}
     * @memberof PlusOneDetail
     */
    'dietary_restrictions'?: Array<Diets>;
    /**
     * 
     * @type {string}
     * @memberof PlusOneDetail
     */
    'additional_notes'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PlusOneDetail
     */
    'is_over_19'?: boolean;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Guest
         * @param {CreateUserModel} createUserModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGuestAdminGuestCreatePost: async (createUserModel: CreateUserModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserModel' is not null or undefined
            assertParamExists('createGuestAdminGuestCreatePost', 'createUserModel', createUserModel)
            const localVarPath = `/admin/guest/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Guest
         * @param {string} guestName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGuestAdminGuestGuestNameGet: async (guestName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guestName' is not null or undefined
            assertParamExists('getGuestAdminGuestGuestNameGet', 'guestName', guestName)
            const localVarPath = `/admin/guest/{guest_name}`
                .replace(`{${"guest_name"}}`, encodeURIComponent(String(guestName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAdminLoginPost: async (username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('loginAdminLoginPost', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('loginAdminLoginPost', 'password', password)
            const localVarPath = `/admin/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Nuke Db
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nukeDbAdminNukePost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/nuke`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Users Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUsersMeAdminMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send Invite Email
         * @param {string} guestName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendInviteEmailAdminEmailInviteGuestNamePost: async (guestName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guestName' is not null or undefined
            assertParamExists('sendInviteEmailAdminEmailInviteGuestNamePost', 'guestName', guestName)
            const localVarPath = `/admin/email/invite/{guest_name}`
                .replace(`{${"guest_name"}}`, encodeURIComponent(String(guestName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Guest
         * @param {CreateUserModel} createUserModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGuestAdminGuestCreatePost(createUserModel: CreateUserModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGuestAdminGuestCreatePost(createUserModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.createGuestAdminGuestCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Guest
         * @param {string} guestName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGuestAdminGuestGuestNameGet(guestName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuestDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGuestAdminGuestGuestNameGet(guestName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.getGuestAdminGuestGuestNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginAdminLoginPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginAdminLoginPost(username, password, grantType, scope, clientId, clientSecret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.loginAdminLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Nuke Db
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nukeDbAdminNukePost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nukeDbAdminNukePost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.nukeDbAdminNukePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Users Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readUsersMeAdminMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admin>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readUsersMeAdminMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.readUsersMeAdminMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Send Invite Email
         * @param {string} guestName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendInviteEmailAdminEmailInviteGuestNamePost(guestName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendInviteEmailAdminEmailInviteGuestNamePost(guestName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.sendInviteEmailAdminEmailInviteGuestNamePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Guest
         * @param {AdminApiCreateGuestAdminGuestCreatePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGuestAdminGuestCreatePost(requestParameters: AdminApiCreateGuestAdminGuestCreatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.createGuestAdminGuestCreatePost(requestParameters.createUserModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Guest
         * @param {AdminApiGetGuestAdminGuestGuestNameGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGuestAdminGuestGuestNameGet(requestParameters: AdminApiGetGuestAdminGuestGuestNameGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<GuestDetail> {
            return localVarFp.getGuestAdminGuestGuestNameGet(requestParameters.guestName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login
         * @param {AdminApiLoginAdminLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAdminLoginPost(requestParameters: AdminApiLoginAdminLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccessToken> {
            return localVarFp.loginAdminLoginPost(requestParameters.username, requestParameters.password, requestParameters.grantType, requestParameters.scope, requestParameters.clientId, requestParameters.clientSecret, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Nuke Db
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nukeDbAdminNukePost(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.nukeDbAdminNukePost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Users Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUsersMeAdminMeGet(options?: RawAxiosRequestConfig): AxiosPromise<Admin> {
            return localVarFp.readUsersMeAdminMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send Invite Email
         * @param {AdminApiSendInviteEmailAdminEmailInviteGuestNamePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendInviteEmailAdminEmailInviteGuestNamePost(requestParameters: AdminApiSendInviteEmailAdminEmailInviteGuestNamePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.sendInviteEmailAdminEmailInviteGuestNamePost(requestParameters.guestName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createGuestAdminGuestCreatePost operation in AdminApi.
 * @export
 * @interface AdminApiCreateGuestAdminGuestCreatePostRequest
 */
export interface AdminApiCreateGuestAdminGuestCreatePostRequest {
    /**
     * 
     * @type {CreateUserModel}
     * @memberof AdminApiCreateGuestAdminGuestCreatePost
     */
    readonly createUserModel: CreateUserModel
}

/**
 * Request parameters for getGuestAdminGuestGuestNameGet operation in AdminApi.
 * @export
 * @interface AdminApiGetGuestAdminGuestGuestNameGetRequest
 */
export interface AdminApiGetGuestAdminGuestGuestNameGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiGetGuestAdminGuestGuestNameGet
     */
    readonly guestName: string
}

/**
 * Request parameters for loginAdminLoginPost operation in AdminApi.
 * @export
 * @interface AdminApiLoginAdminLoginPostRequest
 */
export interface AdminApiLoginAdminLoginPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiLoginAdminLoginPost
     */
    readonly username: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiLoginAdminLoginPost
     */
    readonly password: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiLoginAdminLoginPost
     */
    readonly grantType?: string | null

    /**
     * 
     * @type {string}
     * @memberof AdminApiLoginAdminLoginPost
     */
    readonly scope?: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiLoginAdminLoginPost
     */
    readonly clientId?: string | null

    /**
     * 
     * @type {string}
     * @memberof AdminApiLoginAdminLoginPost
     */
    readonly clientSecret?: string | null
}

/**
 * Request parameters for sendInviteEmailAdminEmailInviteGuestNamePost operation in AdminApi.
 * @export
 * @interface AdminApiSendInviteEmailAdminEmailInviteGuestNamePostRequest
 */
export interface AdminApiSendInviteEmailAdminEmailInviteGuestNamePostRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiSendInviteEmailAdminEmailInviteGuestNamePost
     */
    readonly guestName: string
}

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
    /**
     * 
     * @summary Create Guest
     * @param {AdminApiCreateGuestAdminGuestCreatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public createGuestAdminGuestCreatePost(requestParameters: AdminApiCreateGuestAdminGuestCreatePostRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).createGuestAdminGuestCreatePost(requestParameters.createUserModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Guest
     * @param {AdminApiGetGuestAdminGuestGuestNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public getGuestAdminGuestGuestNameGet(requestParameters: AdminApiGetGuestAdminGuestGuestNameGetRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).getGuestAdminGuestGuestNameGet(requestParameters.guestName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login
     * @param {AdminApiLoginAdminLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public loginAdminLoginPost(requestParameters: AdminApiLoginAdminLoginPostRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).loginAdminLoginPost(requestParameters.username, requestParameters.password, requestParameters.grantType, requestParameters.scope, requestParameters.clientId, requestParameters.clientSecret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Nuke Db
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public nukeDbAdminNukePost(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).nukeDbAdminNukePost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Users Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public readUsersMeAdminMeGet(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).readUsersMeAdminMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send Invite Email
     * @param {AdminApiSendInviteEmailAdminEmailInviteGuestNamePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public sendInviteEmailAdminEmailInviteGuestNamePost(requestParameters: AdminApiSendInviteEmailAdminEmailInviteGuestNamePostRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).sendInviteEmailAdminEmailInviteGuestNamePost(requestParameters.guestName, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRootGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readRootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericMsg>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readRootGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readRootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRootGet(options?: RawAxiosRequestConfig): AxiosPromise<GenericMsg> {
            return localVarFp.readRootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Read Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readRootGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readRootGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GuestApi - axios parameter creator
 * @export
 */
export const GuestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Guest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGuestGuestDetailsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/guest/details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginGuestLoginPost: async (username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('loginGuestLoginPost', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('loginGuestLoginPost', 'password', password)
            const localVarPath = `/guest/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Users Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUsersMeGuestMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/guest/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Guest
         * @param {GuestDetailForm} guestDetailForm 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGuestGuestUpdatePost: async (guestDetailForm: GuestDetailForm, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guestDetailForm' is not null or undefined
            assertParamExists('updateGuestGuestUpdatePost', 'guestDetailForm', guestDetailForm)
            const localVarPath = `/guest/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(guestDetailForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuestApi - functional programming interface
 * @export
 */
export const GuestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Guest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGuestGuestDetailsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuestDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGuestGuestDetailsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuestApi.getGuestGuestDetailsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginGuestLoginPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginGuestLoginPost(username, password, grantType, scope, clientId, clientSecret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuestApi.loginGuestLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Users Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readUsersMeGuestMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Guest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readUsersMeGuestMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuestApi.readUsersMeGuestMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Guest
         * @param {GuestDetailForm} guestDetailForm 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGuestGuestUpdatePost(guestDetailForm: GuestDetailForm, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuestDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGuestGuestUpdatePost(guestDetailForm, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuestApi.updateGuestGuestUpdatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GuestApi - factory interface
 * @export
 */
export const GuestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuestApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Guest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGuestGuestDetailsGet(options?: RawAxiosRequestConfig): AxiosPromise<GuestDetail> {
            return localVarFp.getGuestGuestDetailsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login
         * @param {GuestApiLoginGuestLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginGuestLoginPost(requestParameters: GuestApiLoginGuestLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccessToken> {
            return localVarFp.loginGuestLoginPost(requestParameters.username, requestParameters.password, requestParameters.grantType, requestParameters.scope, requestParameters.clientId, requestParameters.clientSecret, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Users Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUsersMeGuestMeGet(options?: RawAxiosRequestConfig): AxiosPromise<Guest> {
            return localVarFp.readUsersMeGuestMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Guest
         * @param {GuestApiUpdateGuestGuestUpdatePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGuestGuestUpdatePost(requestParameters: GuestApiUpdateGuestGuestUpdatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<GuestDetail> {
            return localVarFp.updateGuestGuestUpdatePost(requestParameters.guestDetailForm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for loginGuestLoginPost operation in GuestApi.
 * @export
 * @interface GuestApiLoginGuestLoginPostRequest
 */
export interface GuestApiLoginGuestLoginPostRequest {
    /**
     * 
     * @type {string}
     * @memberof GuestApiLoginGuestLoginPost
     */
    readonly username: string

    /**
     * 
     * @type {string}
     * @memberof GuestApiLoginGuestLoginPost
     */
    readonly password: string

    /**
     * 
     * @type {string}
     * @memberof GuestApiLoginGuestLoginPost
     */
    readonly grantType?: string | null

    /**
     * 
     * @type {string}
     * @memberof GuestApiLoginGuestLoginPost
     */
    readonly scope?: string

    /**
     * 
     * @type {string}
     * @memberof GuestApiLoginGuestLoginPost
     */
    readonly clientId?: string | null

    /**
     * 
     * @type {string}
     * @memberof GuestApiLoginGuestLoginPost
     */
    readonly clientSecret?: string | null
}

/**
 * Request parameters for updateGuestGuestUpdatePost operation in GuestApi.
 * @export
 * @interface GuestApiUpdateGuestGuestUpdatePostRequest
 */
export interface GuestApiUpdateGuestGuestUpdatePostRequest {
    /**
     * 
     * @type {GuestDetailForm}
     * @memberof GuestApiUpdateGuestGuestUpdatePost
     */
    readonly guestDetailForm: GuestDetailForm
}

/**
 * GuestApi - object-oriented interface
 * @export
 * @class GuestApi
 * @extends {BaseAPI}
 */
export class GuestApi extends BaseAPI {
    /**
     * 
     * @summary Get Guest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestApi
     */
    public getGuestGuestDetailsGet(options?: RawAxiosRequestConfig) {
        return GuestApiFp(this.configuration).getGuestGuestDetailsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login
     * @param {GuestApiLoginGuestLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestApi
     */
    public loginGuestLoginPost(requestParameters: GuestApiLoginGuestLoginPostRequest, options?: RawAxiosRequestConfig) {
        return GuestApiFp(this.configuration).loginGuestLoginPost(requestParameters.username, requestParameters.password, requestParameters.grantType, requestParameters.scope, requestParameters.clientId, requestParameters.clientSecret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Users Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestApi
     */
    public readUsersMeGuestMeGet(options?: RawAxiosRequestConfig) {
        return GuestApiFp(this.configuration).readUsersMeGuestMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Guest
     * @param {GuestApiUpdateGuestGuestUpdatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuestApi
     */
    public updateGuestGuestUpdatePost(requestParameters: GuestApiUpdateGuestGuestUpdatePostRequest, options?: RawAxiosRequestConfig) {
        return GuestApiFp(this.configuration).updateGuestGuestUpdatePost(requestParameters.guestDetailForm, options).then((request) => request(this.axios, this.basePath));
    }
}



